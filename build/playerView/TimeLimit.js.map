{"version":3,"file":"TimeLimit.js","sourceRoot":"","sources":["../../src/playerView/TimeLimit.tsx"],"names":[],"mappings":"AAAA;;GAEG;AACH,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAC3D,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,gBAAgB,EAAE,MAAM,cAAc,CAAC;AAOxE,MAAM,CAAC,OAAO,UAAU,QAAQ,CAAC,EAAE,OAAO,GAAG,CAAC,EAAE,KAAK,EAAS;IAE1D,IAAI,KAAK,GAAG,MAAM,CAAM,IAAI,CAAC,CAAC;IAE9B,MAAM,CAAE,UAAU,EAAE,aAAa,CAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IAElD,SAAS,CAAC,GAAG,EAAE;QACX,IAAI,OAAO,GAAG,CAAC,EAAE;YACb,KAAK,CAAC,OAAO,GAAG,WAAW,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;SAClD;QACD,OAAO,GAAG,EAAE;YACR,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACjC,CAAC,CAAC;IACN,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,WAAW,GAAG,GAAG,EAAE;QAErB,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC1B,IAAI,UAAU,GAAG,CAAC,IAAI,OAAO;YAAE,KAAK,EAAE,CAAA;IAC1C,CAAC,CAAC;IAEF,MAAM,MAAM,GAAG,GAAG,EAAE;QAChB,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC7B,KAAK,IAAI,KAAK,EAAE,CAAC;IACrB,CAAC,CAAC;IAEF,OAAO,CACH,oBAAC,gBAAgB,IACb,KAAK,EAAE,EAAE,aAAa,EAAE,KAAK,EAAE,EAC/B,OAAO,EAAE,MAAM,EACf,aAAa,EAAE,CAAC,IACf,OAAO,GAAG,CAAC,IAAI,CACZ,oBAAC,IAAI,IAAC,KAAK,EAAE,MAAM,CAAC,QAAQ;QACxB,oBAAC,IAAI,IAAC,KAAK,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAG,OAAO,GAAG,UAAU,CAAQ,CACzE,CACV,CACc,CACtB,CAAC;AAEN,CAAC;AAED,MAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;IAC7B,SAAS,EAAE;QACP,IAAI,EAAE,CAAC;QACP,0BAA0B;KAC7B;IACD,QAAQ,EAAE;QACN,MAAM,EAAE,MAAM;QACd,cAAc,EAAE,QAAQ;QACxB,UAAU,EAAE,QAAQ;QACpB,WAAW,EAAE,CAAC;KACjB;IACD,QAAQ,EAAE;QACN,MAAM,EAAE,MAAM;QACd,cAAc,EAAE,QAAQ;QACxB,UAAU,EAAE,QAAQ;KACvB;CACJ,CAAC,CAAC","sourcesContent":["/**\n * Created by yuanzhou.xu on 2018/5/16.\n */\nimport React, { useEffect, useState, useRef } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\n\ninterface Props {\n    maxTime?: number;\n    onEnd: () => void;\n}\n\nexport default function TimeLimt({ maxTime = 0, onEnd }: Props) {\n\n    let timer = useRef<any>(null);\n\n    const [ timeNumber, setTimeNumber ] = useState(0);\n\n    useEffect(() => {\n        if (maxTime > 0) {\n            timer.current = setInterval(updateTimer, 1000);\n        }\n        return () => {\n            clearInterval(timer.current);\n        };\n    }, []);\n\n    const updateTimer = () => {\n\n        setTimeNumber(t => t + 1);\n        if (timeNumber + 1 >= maxTime) onEnd()\n    };\n\n    const _onEnd = () => {\n        clearInterval(timer.current);\n        onEnd && onEnd();\n    };\n\n    return (\n        <TouchableOpacity\n            style={{ flexDirection: 'row' }}\n            onPress={_onEnd}\n            activeOpacity={1}>\n            {maxTime > 0 && (\n                <View style={styles.timeView}>\n                    <Text style={{ color: 'green', fontSize: 13 }}>{maxTime - timeNumber}</Text>\n                </View>\n            )}\n        </TouchableOpacity>\n    );\n    \n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        //backgroundColor: '#000',\n    },\n    timeView: {\n        height: '100%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginRight: 5,\n    },\n    nameView: {\n        height: '100%',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n});\n"]}