{"version":3,"file":"VLCPlayer.js","sourceRoot":"","sources":["../src/VLCPlayer.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { \n    useRef, \n    forwardRef, \n    useImperativeHandle \n} from \"react\";\nimport {\n    ViewProps,\n    StyleSheet,\n    NativeModules,\n    requireNativeComponent\n} from 'react-native'\nimport { Image } from \"react-native\";\nimport { requireNativeViewManager } from 'expo-modules-core';\n\n\ntype VLCPlayerProps = {\n    rate?: number,\n    seek?: number;\n    resume?: boolean;\n    snapshotPath?: string;\n    paused?: boolean;\n    autoplay?: boolean;\n    initOptions?: string[];\n\n    autoAspectRatio?: boolean;\n    videoAspectRatio?: string;\n    volume?: number;\n    disableFocus?: boolean;\n    src?: string;\n    playInBackground?: boolean;\n    playWhenInactive?: boolean;\n    resizeMode?: string;\n    poster?: string;\n    repeat?: boolean;\n    muted?: boolean;\n    audioTrack?: number;\n    textTrack?: number;\n    progressUpdateInterval?: number;\n\n    onVideoLoadStart?: (event?: any) => void;\n    onVideoError?: (event?: any) => void;\n    onVideoProgress?: (event?: any) => void;\n    onVideoEnded?: (event?: any) => void;\n    onVideoPlaying?: (event?: any) => void;\n    onVideoPaused?: (event?: any) => void;\n    onVideoStopped?: (event?: any) => void;\n    onVideoBuffering?: (event?: any) => void;\n    onVideoOpen?: (event?: any) => void;\n    onVideoLoad?: (event?: any) => void;\n\n    /* Wrapper component */\n    source: {\n        uri: string;\n    } | number;\n    subtitleUri?: string;\n\n    onError?: (event?: any) => void;\n    onProgress?: (event?: any) => void;\n    onEnded?: (event?: any) => void;\n    onStopped?: (event?: any) => void;\n    onPlaying?: (event?: any) => void;\n    onPaused?: (event?: any) => void;\n\n    /* Required by react-native */\n    scaleX?: number;\n    scaleY?: number;\n    translateX?: number;\n    translateY?: number;\n    rotation?: number;\n} & ViewProps;\n\nconst RCTVLCPlayer = requireNativeComponent('RCTVLCPlayer');\n    // requireNativeViewManager('RCTVLCPlayer');\n\nexport interface VLCPlayerHandler {\n    // seek: (pos: number) => void;\n    // resume: (isResume: boolean) => void;\n    // snapshot: (path: string) => void;\n    // autoAspectRatio: (isAuto: boolean) => void;\n    // changeVideoAspectRatio: (ratio: string) => void;\n    _onBuffering: (event: any) => void;\n    _onError: (event: any) => void;\n    _onOpen: (event: any) => void;\n    _onLoadStart: (event: any) => void;\n    _onProgress: (event: any) => void;\n    _onEnded: (event: any) => void;\n    // _onStopped: () => void;\n    _onPaused: (event: any) => void;\n    _onPlaying: (event: any) => void;\n    _onLoad: (event: any) => void;\n}\n\nexport default function VLCPlayer(props: VLCPlayerProps) {\n    const {\n        progressUpdateInterval = 250,\n        paused = false,\n        seek = 0,\n        resume = false,\n        snapshotPath = \"\",\n        autoAspectRatio = false,\n        videoAspectRatio = \"\",\n\n    } = props;\n\n    const vlcRef = useRef<typeof RCTVLCPlayer>(null)\n\n    // constructor(props, context) {\n    //   super(props, context);\n    //   this.seek = this.seek.bind(this);\n    //   this.resume = this.resume.bind(this);\n    //   this.snapshot = this.snapshot.bind(this);\n    //   this._assignRoot = this._assignRoot.bind(this);\n    //   this._onError = this._onError.bind(this);\n    //   this._onProgress = this._onProgress.bind(this);\n    //   this._onEnded = this._onEnded.bind(this);\n    //   this._onPlaying = this._onPlaying.bind(this);\n    //   this._onStopped = this._onStopped.bind(this);\n    //   this._onPaused = this._onPaused.bind(this);\n    //   this._onBuffering = this._onBuffering.bind(this);\n    //   this._onOpen = this._onOpen.bind(this);\n    //   this._onLoadStart = this._onLoadStart.bind(this);\n    //   this._onLoad = this._onLoad.bind(this);\n    //   this.changeVideoAspectRatio = this.changeVideoAspectRatio.bind(this);\n    // }\n    // static defaultProps = {\n    //   autoplay: true,\n    // };\n    \n    // const setNativeProps = (nativeProps: Partial<VLCPlayerProps>) => {\n    //     vlcRef.current?.setNativeProps(nativeProps);\n    // }\n\n    // const seek = (pos: number) => setNativeProps({ seek: pos });\n    \n\n    // const resume = (isResume: boolean) => setNativeProps({ resume: isResume })\n\n    // const snapshot = (path: string) => setNativeProps({ snapshotPath: path });\n\n    // const autoAspectRatio = (isAuto: boolean) => setNativeProps({ autoAspectRatio: isAuto });\n\n    // const changeVideoAspectRatio = (ratio: string) => setNativeProps({ videoAspectRatio: ratio });\n\n    // const _assignRoot = (component) => {\n    //     this._root = component;\n    // }\n    \n\n    const _onBuffering = (event: any) => {\n        if (props.onVideoBuffering) {\n            props.onVideoBuffering(event.nativeEvent);\n        }\n    }\n\n    const _onError = (event: any) => {\n        if (props.onError) {\n            props.onError(event.nativeEvent);\n        }\n    }\n\n    const _onOpen = (event: any) => {\n        if (props.onVideoOpen) {\n            props.onVideoOpen(event.nativeEvent);\n        }\n    }\n\n    const _onLoadStart = (event: any) => {\n        if (props.onVideoLoadStart) {\n            props.onVideoLoadStart(event.nativeEvent);\n        }\n    }\n\n    const _onProgress = (event: any) => {\n        if (props.onVideoProgress) {\n            props.onVideoProgress(event.nativeEvent);\n        }\n    }\n\n    const _onEnded = (event: any) => {\n        if (props.onEnded) {\n            props.onEnded(event.nativeEvent);\n        }\n    }\n\n    // const _onStopped = () => {\n    //     setNativeProps({ paused: true });\n    //     if (props.onStopped) {\n    //         props.onStopped();\n    //     }\n    // }\n\n    const _onPaused = (event: any) => {\n        if (props.onPaused) {\n            props.onPaused(event.nativeEvent);\n        }\n    }\n\n    const _onPlaying = (event: any) => {\n        if (props.onPlaying) {\n            props.onPlaying(event.nativeEvent);\n        }\n    }\n\n    const _onLoad = (event: any) => {\n        if (props.onVideoLoad) {\n            props.onVideoLoad(event.nativeEvent);\n        }\n    }\n\n    // const pause = () => {\n    //     vlcRef.current?.setNativeProps({ paused: true });\n    // }\n\n    // // useImperativeHandle(ref, () => ({\n    //     // seek,\n    //     // resume,\n    //     // snapshot,\n    //     // autoAspectRatio,\n    //     // changeVideoAspectRatio,\n    //     _onBuffering,\n    //     _onError,\n    //     _onOpen,\n    //     _onLoadStart,\n    //     _onProgress,\n    //     _onEnded,\n    //     // _onStopped,\n    //     _onPaused,\n    //     _onPlaying,\n    //     _onLoad,\n    // }), [])\n\n    // render() {\n        /* const {\n         source\n         } = this.props;*/\n    const resolvedSource = Image.resolveAssetSource(props.source) || {};\n    // resolvedSource\n\n    let uri = resolvedSource.uri || \"\";\n\n    if (uri && uri.match(/^\\//)) uri = `file://${uri}`\n\n    let isNetwork = !!(uri && uri.match(/^https?:/));\n\n    const isAsset = !!(\n        uri && uri.match(/^(assets-library|file|content|ms-appx|ms-appdata):/)\n    );\n\n    if (!isAsset) isNetwork = true;\n\n    if (uri && uri.match(/^\\//)) isNetwork = false;\n\n    const {\n        autoplay = true,\n        initOptions = [],\n    } = props\n\n    const source = {\n        uri,\n        isNetwork,\n        autoplay,\n        initOptions: [\n            ...initOptions,\n            \"--input-repeat=1000\"\n        ],\n    };\n\n    const nativeProps = Object.assign({}, props);\n    Object.assign(nativeProps, {\n        style: [styles.base, nativeProps.style],\n        source,\n        src: {\n            uri,\n            isNetwork,\n            isAsset,\n            type: \"\",\n            mainVer: 0,\n            patchVer: 0,\n        },\n        paused,\n        seek,\n        resume,\n        snapshotPath,\n        autoAspectRatio,\n        videoAspectRatio,\n        onVideoLoadStart: _onLoadStart,\n        onVideoOpen: _onOpen,\n        onVideoError: _onError,\n        onVideoProgress: _onProgress,\n        onVideoEnded: _onEnded,\n        onVideoEnd: _onEnded,\n        onVideoPlaying: _onPlaying,\n        onVideoPaused: _onPaused,\n        // onVideoStopped: _onStopped,\n        onVideoBuffering: _onBuffering,\n        onVideoLoad: _onLoad,\n        progressUpdateInterval,\n    });\n\n    return (<RCTVLCPlayer {...nativeProps } />);\n}\n\n\n\nconst styles = StyleSheet.create({\n    base: {\n        overflow: \"hidden\",\n    },\n});\n// const RCTVLCPlayer = requireNativeComponent(\"RCTVLCPlayer\", VLCPlayer);\n"]}